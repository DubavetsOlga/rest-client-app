export const en = {
  basic: {
    signIn: 'Sign In',
    signUp: 'Sign Up',
    signOut: 'Sign Out',
    restClient: 'REST Client',
    variables: 'Variables',
    history: 'History',
    main: 'Main',
    unexpectedError: 'An unexpected error occurred.',
    yes: 'Yes',
    no: 'No',
    menu: 'Menu',
    language: 'Language',
  },
  mainPage: {
    welcome: 'Welcome',
    welcomeBack: 'Welcome back,',
    aboutProject:
      'REST Client is an API testing tool. It lets send HTTP requests, customize headers, and inspect responses in real time. Key features include a method selector, URL input, request/response editors, and code generation. Users can save variables for reuse and browse their request history.',
    aboutSchool:
      'The project was developed as part of the React course at Rolling Scopes School (RS School) â€” a free online school that offers a unique educational experience combining theory and practice. RS School is open to everyone, regardless of age, professional background, or place of residence. The program thrives on a culture of free education and a strong desire to share knowledge, allowing students to learn from industry experts and collaborate with peers.',
  },
  auth: {
    name: 'Name',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm password',
    haveAccount: 'Already have an account?',
    doNotHaveAccount: "Don't have an account?",
    createAccount: 'Create Account',
  },
  historyPage: {
    title: 'History Requests',
    noRequests: "You haven't executed any requests.",
    empty: "It's empty here. Try:",
    deleteRequest: 'Delete request',
    clearHistory: 'Clear History',
    confirmRemoval: 'Confirm Removal',
    confirmClearHistory: 'Are you sure you want to clear history?',
    confirmRemoveItem: 'Are you sure you want to remove this item?',
  },
  variablesPage: {
    title: 'Variables',
    tableTitle: 'Variable',
    tableValue: 'Value',
    confirmRemoval: 'Confirm Removal',
    confirmRemoveItem: 'Are you sure you want to remove this variable?',
    variableOverwriteTooltip:
      'This variable will overwrite an existing one with the same key',
    variableNamePlaceholder: 'Add new variable',
    variableValuePlaceholder: 'Add value',
    variablesFilterPlaceholder: 'Filter variables',
  },
  clientPage: {
    send: 'Send',
    method: 'Method',
    body: 'Body',
    headers: 'Headers',
    code: 'Code',
    text: 'Text',
    prettyError: 'Prettifying is available only for valid JSON',
    urlPlaceholder: 'Enter URL',
    response: 'Response',
    addKey: 'Add Key',
    addValue: 'Add Value',
    key: 'Key',
    value: 'Value',
    codeError: 'There are not enough details for the code to be generated',
    confirmDeletion: 'Confirm Deletion',
    confirmDeleteHeader: 'Are you sure you want to delete header?',
    headerRequired: 'Header key is required',
    headerUnique: 'Header key must be unique',
    beautify: 'Beautify JSON',
    codeGenerationFailed: 'Code generation failed',
    emptyHeaderValue:
      'A header with an empty value will not be used in the request',
    deleteHeader: 'Delete header',
  },
  errorPage: {
    text: 'Page Not Found',
    link: 'Go to Main',
  },
  validations: {
    required: 'Required field',
    nameCapitalized: 'Name must start with a capital letter',
    emailInvalid: 'Invalid email address',
    passwordMinLength: 'Password must be at least 8 characters long',
    passwordStrength: 'Must include: 0-9, A-Z, a-z & special character',
    passwordsMustMatch: 'Passwords must match',
  },
  developers: {
    Volha: 'Volha Dubavets',
    Timofei: 'Timofei Naryshkin',
    Polina: 'Polina Ryabova',
    frontendDeveloper: 'Frontend Developer',
    Sopot: 'Sopot, Poland',
    Batumi: 'Batumi, Georgia',
  },
  errors: {
    readError: 'Failed to load data',
    saveError: 'Failed to save data',
    deleteError: 'Failed to delete data',
  },
  firebase: {
    invalidCredential: 'Invalid Credential',
    userNotFound: 'No user found with this email',
    wrongPassword: 'Incorrect password',
    defaultError: 'Something went wrong',
    invalidEmail: 'Email address is malformed',
    emailInUse: 'Email is already registered',
    tooManyRequests: 'Too many failed login attempts',
    networkRequestFailed: 'No internet connection',
    internalError: 'Firebase server issue',
  },
};

export type LanguagesObjType = typeof en;
